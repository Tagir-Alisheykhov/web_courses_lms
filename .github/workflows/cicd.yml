name: CI Django with Postgres

on:
  push:
    branches: [main]


jobs:
  test:
    runs-on: ubuntu-latest

    steps:
    - name: Check out code
      uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Cache Docker layers
      uses: actions/cache@v3
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ hashFiles('**/Dockerfile*') }}

    - name: Build Docker image
      run: docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/web_courses_lms:${{ github.sha }} .

    - name: Start services with Docker Compose
      run: |
        echo "POSTGRES_DB=web_courses_lms" >> .env
        echo "POSTGRES_USER=postgres" >> .env
        echo "POSTGRES_PASSWORD=password" >> .env
        echo "POSTGRES_HOST=db" >> .env
        echo "POSTGRES_PORT=5432" >> .env
        echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> .env
        echo "DEBUG=False" >> .env
        echo "REDIS_BACKEND=${{ secrets.REDIS_BACKEND }}" >> .env
        echo "REDIS_LOCATION=${{ secrets.REDIS_LOCATION }}" >> .env
        echo "DOCKER_HUB_USERNAME=${{ secrets.DOCKER_HUB_USERNAME }}" >> .env
        echo "GITHUB_SHA=${{ github.sha }}" >> .env
        docker compose up -d --build
        docker compose logs db
        docker compose logs redis

    - name: Wait for PostgreSQL to be ready
      run: |
        echo "Checking PostgreSQL health..."
        for i in {1..30}; do
          if [ $(docker compose ps -q db) ] && \
             [ "$(docker inspect -f '{{.State.Health.Status}}' $(docker compose ps -q db))" = "healthy" ]; then
            echo "PostgreSQL is ready!"
            exit 0
          fi
          echo "Waiting for PostgreSQL... ($i/30)"
          sleep 5
        done
        echo "PostgreSQL failed to start"
        docker compose logs db
        exit 1

    - name: Wait for Redis to be ready
      run: |
        echo "Checking Redis container status..."
        docker compose ps
        
        echo "Waiting for Redis to be healthy..."
        for i in {1..30}; do
          container_id=$(docker compose ps -q redis)
          if [ -n "$container_id" ] && \
             [ "$(docker inspect -f '{{.State.Health.Status}}' $container_id)" = "healthy" ]; then
            echo "Redis is ready!"
            docker compose exec redis redis-cli ping
            exit 0
          fi
          echo "Waiting for Redis... ($i/30)"
          sleep 2
        done
        echo "Redis failed to become healthy"
        docker compose logs redis
        exit 1

    - name: Check database connection
      run: |
        docker compose exec web python -c "
        import os, psycopg2;
        conn = psycopg2.connect(
            dbname=os.getenv('POSTGRES_DB'),
            user=os.getenv('POSTGRES_USER'),
            password=os.getenv('POSTGRES_PASSWORD'),
            host=os.getenv('POSTGRES_HOST'),
            port=os.getenv('POSTGRES_PORT')
        );
        print('Connection successful!');
        conn.close()
        "

    - name: Run migrations
      run: |
        docker compose exec web python manage.py migrate --noinput

    - name: Run tests
      run: |
        docker compose exec web python manage.py test

    - name: Stop services
      run: docker compose down

  build:
    needs: test
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Log in in Docker Hub
        run: echo ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }} | docker login -u ${{ secrets.DOCKER_HUB_USERNAME }} --password-stdin

      - name: Build Docker image
        run: docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/web_courses_lms:${{ github.sha }} .

      - name: Push Docker image in Docker hub
        run: docker push ${{ secrets.DOCKER_HUB_USERNAME }}/web_courses_lms:${{ github.sha }}

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_KEY }}

      - name: Deploy to server
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
          mkdir -p /var/www/web_courses_lms
          cd var/www/web_courses_lms
          docker compose down || true
          docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/web_courses_lms:${{ github.sha }}
          docker compose up -d
          EOF
