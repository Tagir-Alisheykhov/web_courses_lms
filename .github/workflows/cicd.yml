name: CI Django with Postgres

on:
  push:
    branches: [main]


jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:17
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
    - uses: actions/checkout@v3

    - uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - uses: snok/install-poetry@v1
      with:
        version: "2.1.1"

    - run: |
        echo "SECRET_KEY=test-key-123" > .env
        echo "DATABASE_URL=postgres://postgres:postgres@postgres:5432/test_db" >> .env

    - run: poetry install --no-root

    - run: poetry run python manage.py migrate

    - run: poetry run python manage.py test

  build:
    needs: test
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Log in in Docker Hub
        run: echo ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }} | docker login -u ${{ secrets.DOCKER_HUB_USERNAME }} --password-stdin

      - name: Build Docker image
        run: docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/web_courses_lms:${{ github.sha }} .

      - name: Push Docker image in Docker hub
        run: docker push ${{ secrets.DOCKER_HUB_USERNAME }}/web_courses_lms:${{ github.sha }}

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.8.1
        with:
          ssh-private-key: ${{ secrets.SSH_KEY }}

      - name: Prepare server directories
        run: |
          ssh ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} "
            mkdir -p ~/web_courses_lms/{media,static}
            chown -R 1000:1000 ~/web_courses_lms
          "

      - name: Deploy application
        run: |
          # Очистка предыдущих файлов (кроме данных)
          ssh ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} "
            cd ~/web_courses_lms
            rm -f docker-compose.yml .env 2>/dev/null || true
          "
          
          # Копируем новые файлы
          if [ -f "docker-compose.yml" ]; then
            scp docker-compose.yml ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }}:~/web_courses_lms/
          fi
          
          scp .env.prod ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }}:~/web_courses_lms/.env
          
          # Перезапуск контейнеров
          ssh ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} "
            cd ~/web_courses_lms
            docker compose down 2>/dev/null || true
            docker compose pull
            docker compose up -d --build
          "
