name: CI Django with Postgres

on:
  push:
    branches: [main]


jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: ${{ secrets.DB_NAME }}
          POSTGRES_USER: ${{ secrets.DB_USER }}
          POSTGRES_PASSWORD: ${{ secrets.DB_PASSWORD }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 30
          --env POSTGRES_INITDB_ARGS="--no-sync"

    steps:
    - name: Check out code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: "2.1.1"
        virtualenvs-in-project: true

    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pypoetry
        key: deps-${{ hashFiles('pyproject.toml') }}-${{ hashFiles('poetry.lock') }}
        restore-keys: deps-${{ hashFiles('pyproject.toml') }}-

    - name: Install dependencies
      run: |
        poetry install --no-root

    - name: Create .env file
      run: |
        echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> .env
        echo "DEBUG=${{ secrets.DEBUG }}" >> .env
        echo "DB_NAME=web_courses_lms" >> .env
        echo "DB_USER=postgres" >> .env
        echo "DB_PASSWORD=password" >> .env
        echo "DB_HOST=postgres" >> .env
        echo "DB_PORT=5432" >> .env
        echo "REDIS_BACKEND=${{ secrets.REDIS_BACKEND }}" >> .env
        echo "REDIS_LOCATION=${{ secrets.REDIS_LOCATION }}" >> .env

    - name: Add delay before checks
      run: sleep 15

    - name: Check PostgreSQL version
      run: docker run --rm postgres:15 pg_isready

    - name: Show PostgreSQL logs
      run: docker logs postgres || true

    - name: Check DNS resolution for PostgreSQL
      run: |
        nslookup -c 3 postgres || (echo "Failed to resolve 'postgres'" && exit 1)

    - name: Show PostgreSQL container status
      run: docker ps -a

    - name: Check if PostgreSQL container is running
      run: |
        if docker ps -q -f name=postgres > /dev/null; then
          echo "PostgreSQL container is running."
        else
          echo "PostgreSQL container is not running yet."
        fi

    - name: Wait for PostgreSQL to be ready (HEALTHCHECK)
      run: |
        until docker inspect -f '{{.State.Health.Status}}' postgres | grep -q "healthy"; do
          echo "Waiting for PostgreSQL HEALTHCHECK..."
          sleep 5
        done

    - name: Wait for PostgreSQL to be ready (psql)
      run: |
        until psql -h postgres -U ${{ secrets.DB_USER }} -c '\l'; do
          echo "Waiting for PostgreSQL..."
          sleep 5
        done

    - name: Run migrations
      run: poetry run python manage.py migrate

    - name: Run tests
      run: poetry run python manage.py test

  build:
    needs: test
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Log in in Docker Hub
        run: echo ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }} | docker login -u ${{ secrets.DOCKER_HUB_USERNAME }} --password-stdin

      - name: Build Docker image
        run: docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/web_courses_lms:${{ github.sha }} .

      - name: Push Docker image in Docker hub
        run: docker push ${{ secrets.DOCKER_HUB_USERNAME }}/web_courses_lms:${{ github.sha }}

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.8.1
        with:
          ssh-private-key: ${{ secrets.SSH_KEY }}

      - name: Prepare server directories
        run: |
          ssh ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} "
            mkdir -p ~/web_courses_lms/{media,static}
            chown -R 1000:1000 ~/web_courses_lms
          "

      - name: Deploy application
        run: |
          # Очистка предыдущих файлов (кроме данных)
          ssh ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} "
            cd ~/web_courses_lms
            rm -f docker-compose.yml .env 2>/dev/null || true
          "
          
          # Копируем новые файлы
          if [ -f "docker-compose.yml" ]; then
            scp docker-compose.yml ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }}:~/web_courses_lms/
          fi
          
          scp .env.prod ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }}:~/web_courses_lms/.env
          
          # Перезапуск контейнеров
          ssh ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} "
            cd ~/web_courses_lms
            docker compose down 2>/dev/null || true
            docker compose pull
            docker compose up -d --build
          "
