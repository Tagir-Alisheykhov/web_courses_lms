name: CI Django with Postgres

on:
  push:
    branches: [main]


jobs:
  test:
    runs-on: ubuntu-latest

    steps:
    - name: Check out code
      uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Cache Docker layers
      uses: actions/cache@v3
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ hashFiles('**/Dockerfile*') }}

    - name: Start services with Docker Compose
      run: |
        # Создаём .env файл для Docker Compose
        echo "POSTGRES_DB=web_courses_lms" >> .env
        echo "POSTGRES_USER=postgres" >> .env
        echo "POSTGRES_PASSWORD=password" >> .env
        echo "POSTGRES_HOST=db" >> .env
        echo "POSTGRES_PORT=5432" >> .env
        echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> .env
        echo "DEBUG=False" >> .env
        echo "REDIS_BACKEND=${{ secrets.REDIS_BACKEND }}" >> .env
        echo "REDIS_LOCATION=${{ secrets.REDIS_LOCATION }}" >> .env
        docker compose up -d --build

    - name: Wait for PostgreSQL to be ready
      run: |
        until docker exec db pg_isready -q; do
          echo "Waiting for PostgreSQL..."
          sleep 5
        done

    - name: Wait for Redis to be ready
      run: |
        until docker exec redis redis-cli ping | grep PONG; do
          echo "Waiting for Redis..."
          sleep 5
        done

    - name: Run migrations
      run: |
        docker compose exec web poetry run python manage.py migrate

    - name: Run tests
      run: |
        docker compose exec web poetry run python manage.py test

    - name: Stop services
      run: docker compose down

  build:
    needs: test
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Log in in Docker Hub
        run: echo ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }} | docker login -u ${{ secrets.DOCKER_HUB_USERNAME }} --password-stdin

      - name: Build Docker image
        run: docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/web_courses_lms:${{ github.sha }} .

      - name: Push Docker image in Docker hub
        run: docker push ${{ secrets.DOCKER_HUB_USERNAME }}/web_courses_lms:${{ github.sha }}

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.8.1
        with:
          ssh-private-key: ${{ secrets.SSH_KEY }}

      - name: Prepare server directories
        run: |
          ssh ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} "
            mkdir -p ~/web_courses_lms/{media,static}
            chown -R 1000:1000 ~/web_courses_lms
          "

      - name: Deploy application
        run: |
          # Очистка предыдущих файлов (кроме данных)
          ssh ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} "
            cd ~/web_courses_lms
            rm -f docker-compose.yml .env 2>/dev/null || true
          "
          
          # Копируем новые файлы
          if [ -f "docker-compose.yml" ]; then
            scp docker-compose.yml ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }}:~/web_courses_lms/
          fi
          
          scp .env.prod ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }}:~/web_courses_lms/.env
          
          # Перезапуск контейнеров
          ssh ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} "
            cd ~/web_courses_lms
            docker compose down 2>/dev/null || true
            docker compose pull
            docker compose up -d --build
          "
